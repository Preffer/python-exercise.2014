// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Spider, cheerio, http, sqlite3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http');

  cheerio = require('cheerio');

  sqlite3 = require('sqlite3');

  Spider = (function() {
    function Spider() {
      this.getItemCount = __bind(this.getItemCount, this);
      this.queryProblems = __bind(this.queryProblems, this);
      this.selectAllProblems = __bind(this.selectAllProblems, this);
      this.fetchAllProblems = __bind(this.fetchAllProblems, this);
      this.afterFetch = __bind(this.afterFetch, this);
      this.fetchProblem = __bind(this.fetchProblem, this);
      this.prepareFetch = __bind(this.prepareFetch, this);
      this.getProblemMax = __bind(this.getProblemMax, this);
      this.getVolumeCount = __bind(this.getVolumeCount, this);
      this.fetch = __bind(this.fetch, this);
      this.run = __bind(this.run, this);
      this.db = new sqlite3.Database('data.db');
      this.db.run('CREATE VIRTUAL TABLE IF NOT EXISTS problems USING fts4(id, title, body)');
      this.baseUrl = 'http://acm.zju.edu.cn';
      this.indexPath = '/onlinejudge/showProblemsets.do';
      this.voluemPath = '/onlinejudge/showProblems.do?contestId=1&pageNumber=';
      this.problemPath = '/onlinejudge/showProblem.do?problemCode=';
      this.problemMin = 1001;
    }

    Spider.prototype.run = function() {
      return this.getVolumeCount();
    };

    Spider.prototype.fetch = function(url, callback) {
      var req;
      req = http.get(url, (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.on('data', function(chunk) {
            return body += chunk;
          });
          return res.on('end', function() {
            return callback(body);
          });
        };
      })(this));
      return req.on('error', (function(_this) {
        return function(e) {
          console.log("Problem with request " + url + ": " + e.message);
          return _this.fetch(url, callback);
        };
      })(this));
    };

    Spider.prototype.getVolumeCount = function() {
      return this.fetch(this.baseUrl + this.indexPath, (function(_this) {
        return function(body) {
          var $;
          $ = cheerio.load(body);
          _this.voluemCount = $('#content_body > form:nth-child(1) > a').length;
          return _this.getProblemMax();
        };
      })(this));
    };

    Spider.prototype.getProblemMax = function() {
      return this.fetch(this.baseUrl + this.voluemPath + this.voluemCount, (function(_this) {
        return function(body) {
          var $;
          $ = cheerio.load(body);
          _this.problemMax = $('#content_body > form:nth-child(1) > table > tr:last-child > td.problemId > a > font').text();
          _this.problemCount = _this.problemMax - _this.problemMin + 1;
          console.log("" + _this.problemCount + " Problems in total");
          return _this.fetchAllProblems();
        };
      })(this));
    };

    Spider.prototype.prepareFetch = function() {
      this.db.serialize((function(_this) {
        return function() {
          _this.stmt = _this.db.prepare('INSERT OR REPLACE INTO problems (rowid, id, title, body) VALUES (?, ?, ?, ?)');
          return _this.db.run('BEGIN');
        };
      })(this));
      this.tpstart = Date.now();
      return this.done = 0;
    };

    Spider.prototype.fetchProblem = function(id) {
      return this.fetch(this.baseUrl + this.problemPath + id, (function(_this) {
        return function(body) {
          var $, title;
          _this.done++;
          $ = cheerio.load(body);
          title = $('#content_body > center:nth-child(1) > span').text();
          body = $('#content_body').text();
          console.log("Now fetching ProblemID: " + id + ", Title: " + title);
          _this.stmt.run(id - _this.problemMin, id, title, body);
          if (_this.done === _this.problemCount) {
            return _this.afterFetch();
          }
        };
      })(this));
    };

    Spider.prototype.afterFetch = function() {
      this.tpend = Date.now();
      console.log("Fetch data used " + ((this.tpend - this.tpstart) / 1000) + " s");
      console.log('Fetch data end, writing to database');
      this.tpstart = Date.now();
      this.db.serialize((function(_this) {
        return function() {
          _this.db.run('COMMIT');
          return _this.stmt.finalize();
        };
      })(this));
      return this.db.close((function(_this) {
        return function() {
          _this.tpend = Date.now();
          console.log("Wirte to database used " + ((_this.tpend - _this.tpstart) / 1000) + " s");
          return _this.exit();
        };
      })(this));
    };

    Spider.prototype.fetchAllProblems = function() {
      var i, _i, _ref, _ref1, _results;
      this.prepareFetch();
      _results = [];
      for (i = _i = _ref = this.problemMin, _ref1 = this.problemMax; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(this.fetchProblem(i));
      }
      return _results;
    };

    Spider.prototype.selectAllProblems = function() {
      return this.db.each('SELECT * FROM problems', function(err, row) {
        return console.log(row);
      });
    };

    Spider.prototype.queryProblems = function(keyword) {
      return this.db.each('SELECT id, title FROM problems WHERE body MATCH ?', keyword, (function(_this) {
        return function(err, row) {
          return console.log("ProblemID: " + row.id + ", Title: " + row.title + ", Link: " + (_this.baseUrl + _this.problemPath + row.id));
        };
      })(this), (function(_this) {
        return function(err, count) {
          console.log("" + count + " problems match your keyword");
          return _this.exit();
        };
      })(this));
    };

    Spider.prototype.getItemCount = function() {
      return this.db.get('SELECT COUNT(*) AS count FROM problems', function(error, row) {
        return console.log("Database have " + row.count + " problems stored now");
      });
    };

    Spider.prototype.exit = function() {
      return process.exit(0);
    };

    return Spider;

  })();

  exports.Spider = Spider;

}).call(this);
