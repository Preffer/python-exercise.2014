// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Spider, child_process, http, jsdom, numCPUs, sqlite3;

  http = require('http');

  jsdom = require('jsdom');

  sqlite3 = require('sqlite3');

  child_process = require('child_process');

  numCPUs = require('os').cpus().length;

  Spider = function() {
    this.db = new sqlite3.Database('data.db');
    this.db.run('CREATE VIRTUAL TABLE IF NOT EXISTS problems USING fts4(id, title, body)');
    this.baseUrl = 'http://acm.zju.edu.cn';
    this.indexPath = '/onlinejudge/showProblemsets.do';
    this.voluemPath = '/onlinejudge/showProblems.do?contestId=1&pageNumber=';
    this.problemPath = '/onlinejudge/showProblem.do?problemCode=';
    this.problemMin = 1001;
    this.run = (function(_this) {
      return function(mode) {
        _this.mode = mode;
        return _this.getVolumeCount();
      };
    })(this);
    this.getVolumeCount = (function(_this) {
      return function() {
        return jsdom.env({
          url: _this.baseUrl + _this.indexPath,
          done: function(errors, window) {
            _this.voluemCount = window.document.querySelectorAll('#content_body > form:nth-child(1) > a').length;
            window.close();
            return _this.getProblemMax();
          }
        });
      };
    })(this);
    this.getVoluemPathList = (function(_this) {
      return function() {
        return jsdom.env({
          url: _this.baseUrl + _this.indexPath,
          done: function(errors, window) {
            _this.voluemPathList = window.document.querySelectorAll('#content_body > form:nth-child(1) > a')._toArray().map(function(item) {
              return item.getAttribute('href');
            });
            return window.close();
          }
        });
      };
    })(this);
    this.getProblemMax = (function(_this) {
      return function() {
        return jsdom.env({
          url: _this.baseUrl + _this.voluemPath + _this.voluemCount,
          done: function(errors, window) {
            var $;
            $ = require('jquery')(window);
            _this.problemMax = $('#content_body > form:nth-child(1) > table > tr:last-child > td.problemId > a > font').text();
            _this.problemCount = _this.problemMax - _this.problemMin + 1;
            console.log(_this.problemCount + ' Problems in total');
            window.close();
            if (_this.mode === 'parallel') {
              return _this.parallelFetchAllProblems();
            } else {
              return _this.serializeFetchAllProblems();
            }
          }
        });
      };
    })(this);
    this.fetchStoreProblem = (function(_this) {
      return function(id) {
        return jsdom.env({
          url: _this.baseUrl + _this.problemPath + id,
          done: function(errors, window) {
            var $, body, title;
            $ = require('jquery')(window);
            title = $('#content_body > center:nth-child(1) > span').text();
            body = $('#content_body').text();
            console.log('Now fetching ProblemID: ' + id + ', Title: ' + title);
            _this.stmt.run(id - _this.problemMin, id, title, body);
            _this.done++;
            window.close();
            if (_this.done === _this.problemCount) {
              return _this.afterFetch();
            }
          }
        });
      };
    })(this);
    this.prepareFetch = (function(_this) {
      return function() {
        _this.db.serialize(function() {
          _this.stmt = _this.db.prepare('INSERT OR REPLACE INTO problems (rowid, id, title, body) VALUES (?, ?, ?, ?)');
          return _this.db.run('BEGIN');
        });
        _this.tpstart = Date.now();
        return _this.done = 0;
      };
    })(this);
    this.afterFetch = (function(_this) {
      return function() {
        _this.tpend = Date.now();
        console.log('Fetch data used ' + (_this.tpend - _this.tpstart) / 1000 + ' s');
        console.log('Fetch data end, writing to database');
        _this.tpstart = Date.now();
        _this.db.serialize(function() {
          _this.db.run('COMMIT');
          return _this.stmt.finalize();
        });
        return _this.db.close(function() {
          _this.tpend = Date.now();
          console.log('Wirte to database used ' + (_this.tpend - _this.tpstart) / 1000 + ' s');
          return _this.exit();
        });
      };
    })(this);
    return this.serializeFetchAllProblems = (function(_this) {
      return function() {
        var i, _i, _ref, _ref1, _results;
        _this.prepareFetch();
        _results = [];
        for (i = _i = _ref = _this.problemMin, _ref1 = _this.problemMax; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          _results.push(_this.fetchStoreProblem(i));
        }
        return _results;
      };
    })(this);
  };

}).call(this);
